@use "sass:math";
@use "../../functions";
// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200))
//    functions.px(576)
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);

  @return if($min != 0, $min, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  }

  @else {
    @content;
  }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns(
  $columns: $grid-columns,
  $gutter: $grid-gutter-width,
  $gutter-mobile: $grid-gutter-width-mobile,
  $breakpoints: $grid-breakpoints
) {
  // Common properties for all breakpoints
  // border box sizing for columns
  %grid-column {
    min-height: 1px; // Prevent columns from collapsing when empty
    padding-left: math.div($gutter, 2);
    padding-right: math.div($gutter, 2);
    position: relative;
    width: 100%;

    @media (max-width: map-get($grid-breakpoints, "sm")) {
      padding-left: math.div($gutter-mobile, 2);
      padding-right: math.div($gutter-mobile, 2);
    }
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }

    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0%;
        flex-grow: 1;
        max-width: 100%;
      }

      .col#{$infix}-auto {
        flex: 0 0 auto;
        max-width: none; // Reset earlier grid tiers
        width: auto;
      }

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      .order#{$infix}-first {
        order: -1;
      }

      .order#{$infix}-last {
        order: $columns + 1;
      }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} {
          order: $i;
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not($infix == "" and $i == 0) {
          // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container() {
  margin-left: auto;
  margin-right: auto;
  padding-left: math.div($grid-gutter-width, 2);
  padding-right: math.div($grid-gutter-width, 2);
  width: 100%;

  @media (max-width: map-get($grid-breakpoints, "sm")) {
    padding-left: math.div($grid-gutter-width-mobile, 2);
    padding-right: math.div($grid-gutter-width-mobile, 2);
  }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-left: math.div($grid-gutter-width, -2);
  margin-right: math.div($grid-gutter-width, -2);

  @media (max-width: map-get($grid-breakpoints, "sm")) {
    margin-left: math.div($grid-gutter-width-mobile, -2);
    margin-right: math.div($grid-gutter-width-mobile, -2);
  }
}

@mixin make-col-ready() {
  min-height: 1px; // Prevent collapsing
  padding-left: math.div($grid-gutter-width, 2);
  padding-right: math.div($grid-gutter-width, 2);
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  // border box sizing for columns
  width: 100%;

  @media (max-width: map-get($grid-breakpoints, "sm")) {
    padding-left: math.div($grid-gutter-width-mobile, 2);
    padding-right: math.div($grid-gutter-width-mobile, 2);
  }
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage(math.div($size, $columns));
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage(math.div($size, $columns));
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: math.div($size, $columns);
  margin-left: if($num == 0, 0, percentage($num));
}

// Quickly modify global styling by enabling or disabling optional features.
$enable-grid-classes: true !default;

// Spacing
//
// Control the default styling of most Bootstrap elements by modifying these
// variables. Mostly focused on spacing.
// You can add more entries to the $spacers map, should you need more variation.

$spacer: 1rem !default;
$spacers: () !default;
$spacers: map-merge(
  (
    0: ($spacer * 0),
    1: ($spacer * 1),
    2: ($spacer * 2),
    2a: ($spacer * 2.5),
    3: ($spacer * 3),
    5: ($spacer * 5),
  ),
  $spacers
);

// Grid breakpoints
//
// Define the minimum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries.

$grid-breakpoints: (
  xs: 0,
  sm: functions.px(576),
  md: functions.px(768),
  lg: functions.px(992),
  xl: functions.px(1240),
) !default;

// Grid containers
//
// Define the maximum width of `.container` for different screen sizes.

$container-max-widths: (
  sm: functions.px(540),
  md: functions.px(720),
  lg: functions.px(960),
  xl: functions.px(1200),
) !default;

// Grid columns
//
// Set the number of columns and specify the width of the gutters.

$grid-columns: 12 !default;
$grid-gutter-width: functions.px(30) !default;
$grid-gutter-width-mobile: functions.px(20) !default;

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    //@if $infix != "" {
    .d#{$infix}-none {
      display: none !important;
    }
    .d#{$infix}-inline {
      display: inline !important;
    }
    .d#{$infix}-block {
      display: block !important;
    }
    .d#{$infix}-flex {
      display: flex !important;
    }
    //}
  }
}
